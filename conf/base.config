/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnadnavar Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {  // base

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    // Requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withName: 'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus         = { check_max( 12 * task.attempt, 'cpus' ) }
        memory       = { check_max( 41.GB * task.attempt, 'memory')}
        time         = { check_max( 6.h  * task.attempt, 'time'    ) }
    }
    withName: '.*HISAT2_BUILD' {
        cpus         = { check_max( 32, 'cpus' ) }
        memory       = { check_max( 185.GB * task.attempt, 'memory')}
        time         = { check_max( 30.h  * task.attempt, 'time' ) }
    }
    withName: '.*HISAT2_ALIGN' {
        cpus         = { check_max( 8 * task.attempt, 'cpus' ) }
        memory       = { check_max( 41.GB * task.attempt, 'memory')}
        time         = { check_max( 4.h  * task.attempt, 'time' ) }
    }
    withName: 'MUTECT2_PAIRED' {
        cpus         = { check_max( 8 * task.attempt, 'cpus' ) }
        memory       = { check_max( 41.GB * task.attempt, 'memory')}
        time         = { check_max( 4.h  * task.attempt, 'time' ) }
    }
    withName: 'ENSEMBLVEP_VEP' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory')}
        time   = { check_max( 6.h  * task.attempt, 'time' ) }
    }

    withName: 'FASTQC|SAMTOOLS_FAIDX|TABIX.*'{
        time    = { check_max( 1.h   * task.attempt, 'time' ) }
        cpus    = { check_max( 1 * task.attempt, 'cpus' ) }
        memory  = { check_max( 4.GB * task.attempt, 'memory')}
    }
    withName: 'MULTIQC|FASTP|MOSDEPTH|SAMTOOLS_CONVERT'{
        time    = { check_max( 2.h   * task.attempt, 'time' ) }
        cpus    = { check_max( 4 * task.attempt, 'cpus' ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory')}
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR'{
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory')}
        time   = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName:'GATK4_GATHERBQSRREPORTS'{
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory')}
        time   = { check_max( 16.h  * task.attempt, 'time' ) }
    }
    withName: 'GATK4_MARKDUPLICATES'{
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 55.GB * task.attempt, 'memory')}
        time   = { check_max( 16.h  * task.attempt, 'time' ) }
    }
    withName:'STRELKA.*|MANTA.*|STAR_ALIGN|RNA_FILTERING' {
        errorStrategy   = { task.exitStatus in [143,137,104,134,139,140,247,1,255] ? 'retry' : 'finish' }
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 41.GB * task.attempt, 'memory')}
        time            = { check_max( 4.h  * task.attempt, 'time' ) }

    }
    withName: 'SAGE' {
        cpus         = { check_max( 4 * task.attempt, 'cpus' ) }
        memory       = { check_max( 14.GB * task.attempt, 'memory')}
        time         = { check_max( 4.h  * task.attempt, 'time' ) }
    }

    withName: 'PICARD_FILTERSAMREADS|RUN_CONSENSUS.*' {
        cpus   = { check_max( 12     * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 2.h  * task.attempt, 'time' ) }
    }
    withName: 'SAMTOOLS_EXTRACT_READ_IDS' {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 12.h  * task.attempt, 'time' ) }
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        cpus   = { check_max( 4                  , 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withName: '.*BAM_SORT_STATS_SAMTOOLS:SAMTOOLS.*' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory')}
        time   = { check_max( 4.h  * task.attempt, 'time' ) }
    }
}
