/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// BAM_ALIGN config

process { // bam_align


    // DNA aligners

    withName: "BWAMEM1_MEM" {
            ext.when         = { params.aligner == "bwa-mem" }
        }

    withName: "BWAMEM2_MEM" {
        ext.when         = { params.aligner == "bwa-mem2" }
    }

    withName: "DRAGMAP_ALIGN" {
        ext.when         = { params.aligner == "dragmap" }
        ext.args         = { "--RGSM ${meta.sample} --RGID ${meta.read_group}" }
    }

    withName: "(BWAMEM.*_MEM|DRAGMAP_ALIGN)" {
            ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "${meta.id}.sorted" }
            publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/preprocessing/" },
                pattern: "*bam",
                // Only save if save_output_as_bam AND
                // (save_mapped OR no_markduplicates OR sentieon_dedup) AND
                // only a single BAM file per sample
                saveAs: {
                    if (params.save_output_as_bam &&
                        (
                            params.save_mapped ||
                            (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))
                        ) && (meta.size * meta.num_lanes == 1)
                    ) { "mapped/${meta.id}/${it}" }
                    else { null }
                }
            ]
    }

    withName: "BWAMEM.*_MEM" {
            // Using -B 3 for tumor samples
            ext.args         = { meta.status == 1 ? "-K 100000000 -Y -B 3 -R ${meta.read_group}" : "-K 100000000 -Y -R ${meta.read_group}" }
    }



    withName: 'MERGE_BAM|INDEX_MERGE_BAM' {
    publishDir       = [
        mode: params.publish_dir_mode,
        path: { "${params.outdir}/preprocessing/" },
        pattern: "*{bam,bai}",
        // Only save if (save_output_as_bam AND (no_markduplicates OR save_mapped ))
        saveAs: { (params.save_output_as_bam && (params.save_mapped || params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) ? "mapped/${meta.id}/${it}" : null }
    ]
    }

    withName: 'MERGE_BAM' {
        ext.prefix = { "${meta.id}.sorted" }
    }


    // RNA aligners
    withName: 'STAR_GENOMEGENERATE' {
    ext.args   = params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : ''
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|HISAT2_BUILD|HISAT2_EXTRACTSPLICESITES' {
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/index" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ALIGN' {
    ext.args   = {[
        "--outSAMtype BAM Unsorted",
        "--readFilesCommand zcat",
        "--outFilterMultimapScoreRange 1",
        "--outFilterMultimapNmax 20",
        "--outFilterMismatchNmax 10",
        "--alignMatesGapMax 1000000",
        "--sjdbScore 2",
        "--alignSJDBoverhangMin 1",
        "--genomeLoad NoSharedMemory",
        "--outFilterMatchNminOverLread 0.33",
        "--outFilterScoreMinOverLread 0.33",
        "--twopass1readsN -1",
        "--outSAMattrRGline ${meta.read_group}",
        params.save_unaligned ? "--outReadsUnmapped Fastx" : "",
        params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : "",
        params.star_twopass ? "--twopassMode Basic" : "",
        params.star_max_memory_bamsort > 0 ? "--limitBAMsortRAM ${params.star_max_memory_bamsort}" : "",
        params.star_max_collapsed_junc > 0 ? "--limitOutSJcollapsed ${params.star_max_collapsed_junc}" : ""
    ].flatten().unique(false).join(' ').trim()}
    ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).baseName.tokenize('.')[0]) : "" }
    publishDir = [
        [
            path: { "${params.outdir}/reports/star/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{out,tab}',
            enabled: params.save_align_intermeds
        ],
        [
            path: { "${params.outdir}/preprocessing/star/${meta.patient}/${meta.id}/mapped/" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.save_align_intermeds
        ],
        [
            path: { "${params.outdir}/preprocessing/star/${meta.patient}/${meta.id}/unmapped/" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.save_align_intermeds
        ]
        ]
    }

    // HISAT2 for realignment
    withName: '.*:FASTQ_ALIGN_HISAT2:HISAT2_ALIGN' {
        ext.prefix = {"${meta.sample}"}
        ext.args   = {meta.status < 2 ? "--met-stderr --new-summary --no-spliced-alignment" : "--met-stderr --new-summary " }
        publishDir = [
            [
                path: { "${params.outdir}/report/hisat2/${meta.patient}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_align_intermeds
            ],
            [
                path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }

    // POST ALIGNMENT AND PREPROCESSING BAM TODO: check if it follows new pattern
    withName: '.*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('') : "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.patient}/${meta.id}/${it}" : null }

        ]
    }

    withName: '.*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned') : "${meta.id}.aligned" }
        publishDir = [
                path: { "${params.outdir}/preprocessing/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                saveAs: { (params.save_bam_mapped || (params.skip_tools && params.skip_tools.split(',').contains('markduplicates'))) && (meta.size * meta.numLanes == 1) ? "mapped/${meta.patient}/${meta.id}/${it}" : null }

        ]
    }


    // re-alignment
    // withName: '.*:FASTQ_ALIGN_HISAT2:.*'{
    //     ext.when = {params.skip_tools && !params.skip_tools.split(',').contains('realignment')}
    // }
    withName: '.*:FASTQ_ALIGN_HISAT2:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/hisat2/" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:FASTQ_ALIGN_HISAT2:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/hisat2/${meta.patient}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
        ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.aligned_hs2') : "${meta.id}.aligned_hs2" }
        publishDir = [
            path: { "${params.outdir}/reports/samtools/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

}
