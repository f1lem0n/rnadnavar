/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// QC config

process { // quality_control

    withName: 'FASTQC' {
        ext.args         = '--quiet'
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('fastqc')) }
        publishDir       = [
            [
                path: { "${params.outdir}/reports/fastqc/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/reports"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: !(params.skip_tools && (params.skip_tools.split(',').contains('multiqc')))
        ]
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    }

    // TODO check this is correct
    withName: '.*:CRAM_QC_NO_MD:SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        ext.prefix       = { "${meta.id}.sorted.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (params.skip_tools && !params.skip_tools.split(',').contains('mosdepth')){
        withName: 'MOSDEPTH' {
            ext.args = { !params.wes ? "-n --fast-mode --by 500" : ""}
            ext.prefix       = {
                if (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) {
                    "${meta.id}.sorted"
                } else {
                    "${meta.id}.md"
                }
            }
            ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
            publishDir = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/mosdepth/${meta.id}" },
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }

    withName: '.*:CRAM_QC_RECAL:MOSDEPTH' {
        ext.prefix       = { "${meta.id}.recal" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }

    }

    withName: '.*:CRAM_QC_RECAL:SAMTOOLS_STATS' {
        ext.prefix       = { "${meta.id}.recal.cram" }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/samtools/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // VCF
    withName: 'BCFTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('bcftools')) }
        ext.prefix       = { vcf.baseName - ".vcf" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('vcftools')) }
        ext.prefix       = { variant_file.baseName - ".vcf" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools/${meta.variantcaller}/${meta.id}/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_TSTV_COUNT' {
        ext.args         = "--TsTv-by-count"
    }

    withName: 'VCFTOOLS_TSTV_QUAL' {
        ext.args         = "--TsTv-by-qual"
    }

    withName: 'VCFTOOLS_SUMMARY' {
        ext.args         = "--FILTER-summary"

    }

    withName: '.*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.when    = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.sorted.bam') : "${meta.id}.sorted.bam" }
            publishDir  = [
                path: { "${params.outdir}/reports/samtools/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
    }

    withName: '.*:FASTQ_ALIGN_HISAT2:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.when    = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            ext.prefix  = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(bam.name.tokenize('.')[1]).concat('.sorted.bam') : "${meta.id}.sorted.bam" }
            publishDir  = [
                path: { "${params.outdir}/reports/samtools/hisat2/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
    }

    withName: '.*:BAM_MARKDUPLICATES:CRAM_QC_MOSDEPTH_SAMTOOLS:SAMTOOLS_.*' {
            ext.when    = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
            ext.prefix  = { "${meta.id}.md.cram" }
            publishDir  = [
                path: { "${params.outdir}/reports/samtools/markduplicates/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
    }

    withName: 'MOSDEPTH' {
        ext.args    = { !params.wes ? "-n --fast-mode --by 500" : ""}
        ext.prefix  = {
            if (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) {
                "${meta.id}.sorted"
            } else {
                "${meta.id}.md"
            }
        }
        ext.when    = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir  = [
            mode:   params.publish_dir_mode,
            path:   { "${params.outdir}/reports/mosdepth/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
